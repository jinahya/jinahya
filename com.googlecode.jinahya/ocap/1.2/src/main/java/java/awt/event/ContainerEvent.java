/*
</p>
<a name="notice"><strong><center>
NOTICE
</center></strong><br>
<br>

(c) 2005-2007 Sun Microsystems, Inc. All Rights Reserved.
<p>
Neither this file nor any files generated from it describe a complete
specification, and they may only be used as described below. For
example, no permission is given for you to incorporate this file, in
whole or in part, in an implementation of a Java specification.
<p>
Sun Microsystems Inc. owns the copyright in this file and it is provided
to you for informative, as opposed to normative, use. The file and any
files generated from it may be used to generate other informative
documentation, such as a unified set of documents of API signatures for
a platform that includes technologies expressed as Java APIs. The file
may also be used to produce "compilation stubs," which allow
applications to be compiled and validated for such platforms.
<p>
Any work generated from this file, such as unified javadocs or compiled
stub files, must be accompanied by this notice in its entirety.
<p>
This work corresponds to the API signatures of JSR 217: Personal Basis
Profile 1.1. In the event of a discrepency between this work and the
JSR 217 specification, which is available at
http://www.jcp.org/en/jsr/detail?id=217, the latter takes precedence.
*/


  


package java.awt.event;

import java.awt.AWTEvent;
import java.awt.Container;
import java.awt.Component;

/** 
 * A low-level event which indicates that a container's contents
 * changed because a component was added or removed.
 * <P>
 * Container events are provided for notification purposes ONLY;
 * The AWT will automatically handle changes to the containers
 * contents internally so that the program works properly regardless of
 * whether the program is receiving these events or not.
 * <P>
 * This low-level event is generated by a container object (such as a 
 * Panel) when a component is added to it or removed from it. 
 * The event is passed to every <code>ContainerListener</code>
 * or <code>ContainerAdapter</code> object which registered to receive such
 * events using the component's <code>addContainerListener</code> method.
 * (<code>ContainerAdapter</code> objects implement the 
 * <code>ContainerListener</code> interface.) Each such listener object 
 * gets this <code>ContainerEvent</code> when the event occurs.
 *
 * @see ContainerAdapter
 * @see ContainerListener
 * @see <a href="http://java.sun.com/docs/books/tutorial/post1.0/ui/containerlistener.html">Tutorial: Writing a Container Listener</a>
 * @see <a href="http://www.awl.com/cp/javaseries/jcl1_2.html">Reference: The Java Class Libraries (update file)</a>
 *
 * @author Tim Prinzing
 * @author Amy Fowler
 * @version 1.15 01/23/03
 * @since 1.1
 */
public class ContainerEvent extends ComponentEvent
{
    /** 
     * The first number in the range of ids used for container events.
     */
    public static final int CONTAINER_FIRST = 300;

    /** 
     * The last number in the range of ids used for container events.
     */
    public static final int CONTAINER_LAST = 301;

    /** 
     * This event indicates that a component was added to the container.
     */
    public static final int COMPONENT_ADDED = CONTAINER_FIRST;

    /** 
     * This event indicates that a component was removed from the container.
     */
    public static final int COMPONENT_REMOVED = 1 + CONTAINER_FIRST;

    /** 
     * The non-null component that is being added or
     * removed from the Container.
     *
     * @serial
     * @see #getChild()
     */
     Component child;

    /*
     * JDK 1.1 serialVersionUID 
     */
    private static final long serialVersionUID = -4114942250539772041L;

    /** 
     * Constructs a <code>ContainerEvent</code> object.
     * <p>Note that passing in an invalid <code>id</code> results in
     * unspecified behavior.
     * 
     * @param source the <code>Component</code> object (container)
     *               that originated the event
     * @param id     an integer indicating the type of event
     * @param child  the component that was added or removed
     */
    public ContainerEvent(Component source, int id, Component child) { super(null, 0); }

    /** 
     * Returns the originator of the event.
     *
     * @return the Container object that originated the event
     */
    public Container getContainer() { return null; }

    /** 
     * Returns the component that was affected by the event.
     *
     * @return the Component object that was added or removed
     */
    public Component getChild() {return null; }

    /** 
     * Returns a parameter string identifying this event.
     * This method is useful for event-logging and for debugging.
     *
     * @return a string identifying the event and its attributes
     */
    public String paramString() { return null;}
}
