/*
 * Copyright 2011 Jin Kwon <jinahya at gmail.com>.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package com.googlecode.jinahya.util;


import java.io.Serializable;
import java.util.Random;


/**
 *
 * @author Jin Kwon <jinahya at gmail.com>
 */
public class JinahyaRandom implements Serializable {


    /**
     * GENERATED.
     */
    private static final long serialVersionUID = 4093243768555129124L;


    /**
     * Creates a new instance.
     */
    public JinahyaRandom(final Random random) {
        super();

        if (random == null) {
            throw new IllegalArgumentException("null random");
        }

        this.random = random;
    }


    /**
     * Returns a random number between
     * <code>minimum</code> (inclusive) and
     * <code>maximum</code> (inclusive).
     * <code>0 &lt;= minimum &lt;= maximum</code>
     *
     * @param minimum minimum value; must be greater than or equal to 0.
     * @param maximum maximum value; must be greater than or equal to
     * <code>minimum</code>.
     * @return a number between <code>minimum</code> (inclusive) and
     * <code>maximum</code> (inclusive).
     */
    protected int nextInt(final int minimum, final int maximum) {

        if (minimum < 0) {
            throw new IllegalArgumentException("minimum(" + minimum + ") < 0");
        }

        if (maximum < minimum) {
            throw new IllegalArgumentException(
                "maximum(" + maximum + ") < minimum(" + minimum + ")");
        }

        if (minimum == maximum) {
            return minimum;
        }

        return random.nextInt(maximum - minimum) + minimum;
    }


    /**
     * Generates a byte array of given
     * <code>length</code>.
     *
     * @param length the array length
     * @return the generated byte array
     */
    public byte[] nextBytes(final int length) {

        if (length < 0) {
            throw new IllegalArgumentException("length(" + length + ") < 0");
        }

        return nextBytes(length, length);
    }


    /**
     * Generates a byte array in arbitrary length.
     *
     * @param minimumLength minimum array length; must be greater than or equal
     * to 0.
     * @param maximumLength maximum array length; must be greater than or equal
     * to <code>minimumLength</code>.
     * @return the generated byte array
     */
    public byte[] nextBytes(final int minimumLength, final int maximumLength) {

        if (minimumLength < 0) {
            throw new IllegalArgumentException(
                "minimumLength(" + minimumLength + ") < 0");
        }

        if (maximumLength < minimumLength) {
            throw new IllegalArgumentException(
                "maximumLength(" + maximumLength + ") < minimumLength("
                + minimumLength + ")");
        }

        final int length = nextInt(minimumLength, maximumLength);
        final byte[] bytes = new byte[length];
        random.nextBytes(bytes);
        return bytes;
    }


    /**
     * Generates an unsigned integer in arbitrary bit length.
     * <code>1 &lt;= minimumBitLength &lt; maximumBitLength &lt;= 32</code>
     *
     * @param minimumBitLength minimum bit length; must be greater than or equal
     * to 1.
     * @param maximumBitLength maximum bit length; must be between
     * <code>minimumBitLength</code> (inclusive) and
     * {@value java.lang.Integer#SIZE} (exclusive).
     * @return the generated value.
     */
    public int nextUnsignedInt(final int minimumBitLength,
                               final int maximumBitLength) {

        if (minimumBitLength < 1) {
            throw new IllegalArgumentException(
                "minimumBitLength(" + minimumBitLength + ") < 1");
        }

        if (maximumBitLength < minimumBitLength) {
            throw new IllegalArgumentException(
                "maximumBitLength(" + maximumBitLength
                + ") < minimumBitLength(" + minimumBitLength + ")");
        }

        if (maximumBitLength >= Integer.SIZE) {
            throw new IllegalArgumentException(
                "maximumBitLength(" + maximumBitLength + ") >= "
                + Integer.SIZE);
        }

        final int bitLength = nextInt(minimumBitLength, maximumBitLength);

        return nextUnsignedInt(bitLength);
    }


    /**
     * Generates an unsigned integer of
     * <code>bitLength</code>.
     * <code>1 &lt;= bitLength &lt; 32</code>.
     *
     * @param bitLength bit length between 1 (inclusive) and
     * {@value java.lang.Integer#SIZE} (exclusive).
     * @return the generated value
     */
    public int nextUnsignedInt(final int bitLength) {

        if (bitLength <= 0) {
            throw new IllegalArgumentException(
                "bitLength(" + bitLength + ") < 1");
        }

        if (bitLength >= Integer.SIZE) {
            throw new IllegalArgumentException(
                "bitLength(" + bitLength + ") >= " + Integer.SIZE);
        }

        int nextInt = random.nextInt();

        if (nextInt < 0L) {
            nextInt >>>= (Integer.SIZE - bitLength);
        } else {
            nextInt >>= (Integer.SIZE - bitLength - 1);
        }

        return nextInt;
    }


    /**
     * Generates a signed int in arbitrary bits.
     * <code>1 &lt;= minimumBitLength &lt;= maximumBitLength &lt; 32</code>.
     *
     * @param minimumBitLength minimum bit length; must be greater than 1.
     * @param maximumBitLength maximum bit length; must be between
     * <code>minimumBitLength</code> (inclusive) and
     * {@value java.lang.Integer#SIZE} (inclusive).
     * @return the generated value.
     */
    public int nextSignedInt(final int minimumBitLength,
                             final int maximumBitLength) {

        if (minimumBitLength <= 1) {
            throw new IllegalArgumentException(
                "minimumBitLength(" + minimumBitLength + ") <= 1");
        }

        if (maximumBitLength < minimumBitLength) {
            throw new IllegalArgumentException(
                "maximumBitLength(" + maximumBitLength
                + ") < miinimumBitLength(" + minimumBitLength + ")");
        }

        if (maximumBitLength > Integer.SIZE) {
            throw new IllegalArgumentException(
                "maximumBitLength(" + maximumBitLength + ") > " + Integer.SIZE);
        }

        final int bitLength = nextInt(minimumBitLength, maximumBitLength);

        return nextSignedInt(bitLength);
    }


    /**
     * Generates a signed integer of given
     * <code>bitLength</code>.
     * <code>1 &lt; bitLength &lt;= 32</code>
     *
     * @param bitLength bitLength bit length between 1 (exclusive) and
     * {@value java.lang.Integer#SIZE} (inclusive).
     * @return generated value
     */
    public int nextSignedInt(final int bitLength) {

        if (bitLength <= 1) {
            throw new IllegalArgumentException(
                "bitLength(" + bitLength + ") <= 1");
        }

        if (bitLength > Integer.SIZE) {
            throw new IllegalArgumentException(
                "bitLength(" + bitLength + ") > " + Integer.SIZE);
        }

        int nextInt = random.nextInt();

        if (nextInt > 0L) {
            nextInt >>= (Integer.SIZE - bitLength - 1);
        } else {
            nextInt >>= (Integer.SIZE - bitLength);
        }

        return nextInt;
    }


    /**
     * Generates an unsigned long in arbitrary bits.
     * <code>1 &lt;= minimumBitLength &lt;= maximumBitLength &lt; 64</code>.
     *
     * @param minimumBitLength minimum bit length; must be greater than or equal
     * to 1.
     * @param maximumBitLength maximum bit length; must be between
     * <code>minimumBitLength</code> (inclusive) and
     * {@value java.lang.Long#SIZE} (exclusive).
     * @return the generated value.
     */
    public long nextUnsignedLong(final int minimumBitLength,
                                 final int maximumBitLength) {

        if (minimumBitLength < 1) {
            throw new IllegalArgumentException(
                "minimumBitLength(" + minimumBitLength + ") < 1");
        }

        if (maximumBitLength < minimumBitLength) {
            throw new IllegalArgumentException(
                "maximumBitLength(" + maximumBitLength + ") < minimumBitLength("
                + minimumBitLength + ")");
        }

        if (maximumBitLength >= Long.SIZE) {
            throw new IllegalArgumentException(
                "maximumBitLength(" + maximumBitLength + ") >= " + Long.SIZE);
        }

        final int bitLength = nextInt(minimumBitLength, maximumBitLength);

        return nextUnsignedLong(bitLength);
    }


    /**
     * Generates an unsigned long in arbitrary bit length.
     *
     * @param bitLength bit length between 1 (inclusive) and
     * {@value java.lang.Long#SIZE} (exclusive).
     * @return generated value
     */
    public long nextUnsignedLong(final int bitLength) {

        if (bitLength < 1) {
            throw new IllegalArgumentException(
                "bitLength(" + bitLength + ") < 1");
        }

        if (bitLength >= Long.SIZE) {
            throw new IllegalArgumentException(
                "bitLength(" + bitLength + ") >= " + Long.SIZE);
        }

        long nextLong = random.nextLong();

        if (nextLong < 0L) {
            nextLong >>>= (Long.SIZE - bitLength);
        } else {
            nextLong >>= (Long.SIZE - bitLength - 1);
        }

        return nextLong;
    }


    /**
     * Generates a signed long in arbitrary bit length.
     * <code>1 &lt; minimumBitLength &lt;= maximumBitLength &lt;= 64</code>.
     *
     * @param minimumBitLength minimum bit length; must be greater than 1.
     * @param maximumBitLength maximum bit length; must be between
     * <code>minimumBitLength</code> (inclusive) and
     * {@value java.lang.Long#SIZE} (inclusive).
     * @return generated value.
     */
    public long nextSignedLong(final int minimumBitLength,
                               final int maximumBitLength) {

        if (minimumBitLength <= 1) {
            throw new IllegalArgumentException(
                "minimumBitLength(" + minimumBitLength + ") <= 1");
        }

        if (maximumBitLength < minimumBitLength) {
            throw new IllegalArgumentException(
                "maximumBitLength(" + maximumBitLength
                + ") < minimumBitLength(" + minimumBitLength + ")");
        }

        if (maximumBitLength > Long.SIZE) {
            throw new IllegalArgumentException(
                "maximumBitLength(" + maximumBitLength + ") > " + Long.SIZE);
        }

        final int bitLength = nextInt(minimumBitLength, maximumBitLength);

        return nextSignedLong(bitLength);
    }


    /**
     * Generates a signed long of specified
     * <code>bitLength</code>.
     *
     * @param bitLength bit length between 1 (exclusive) and
     * {@value java.lang.Long#SIZE} (inclusive).
     * @return the generated value.
     */
    public long nextSignedLong(final int bitLength) {

        if (bitLength <= 1) {
            throw new IllegalArgumentException(
                "bitLength(" + bitLength + ") <= 1");
        }

        if (bitLength > Long.SIZE) {
            throw new IllegalArgumentException(
                "bitLength(" + bitLength + ") > " + Long.SIZE);
        }

        long nextLong = random.nextLong();

        if (nextLong > 0L) {
            nextLong >>= (Long.SIZE - bitLength - 1);
        } else {
            nextLong >>= (Long.SIZE - bitLength);
        }

        return nextLong;
    }


    /**
     * wrapped random.
     */
    private final Random random;


}

