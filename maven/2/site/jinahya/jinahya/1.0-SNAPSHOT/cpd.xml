<?xml version="1.0" encoding="UTF-8"?>
<pmd-cpd>
<duplication lines="73" tokens="228">
<file line="32" path="/Volumes/1394/svnwc/jinahya.googlecode.com/trunk/src/main/java/jinahya/net/URLDecoder.java"/>
<file line="32" path="/Volumes/1394/svnwc/jinahya.googlecode.com/trunk/src/main/java/jinahya/rfc3986/PercentDecoder.java"/>
<codefragment>
<![CDATA[
public class PercentDecoder {


    /**
     * 
     * @param encoded
     * @return
     * @throws IOException
     */
    public static String decode(final String encoded) throws IOException {
        return decode(encoded, "UTF-8");
    }


    /**
     * 
     * @param encoded
     * @param encoding
     * @return
     * @throws IOException
     */
    public static String decode(final String encoded, final String encoding)
        throws IOException {

        return new String(decode(encoded.getBytes("US-ASCII")), encoding);
    }


    /**
     * 
     * @param encoded
     * @return
     * @throws IOException
     */
    public static byte[] decode(final byte[] encoded) throws IOException {
        final ByteArrayOutputStream output = new ByteArrayOutputStream();
        decode(new ByteArrayInputStream(encoded), output);
        output.flush();
        return output.toByteArray();
    }


    /**
     * 
     * @param input
     * @param output
     * @throws IOException
     */
    public static void decode(final InputStream input,
                              final OutputStream output)
        throws IOException {

        if (input == null) {
            throw new IllegalArgumentException("null input");
        }

        if (output == null) {
            throw new IllegalArgumentException("null output");
        }

        for (int b = -1; (b = input.read()) != -1;) {
            output.write(decode(b, input));
        }
    }


    static int decode(final int b, final InputStream input)
        throws IOException {

        if ((b >= 0x30 && b <= 0x39)  // digit
            || (b >= 0x41 && b <= 0x5A) // upper case alpha
            || (b >= 0x61 && b <= 0x7A) // lower case alpha
            || (b == 0x2D || b == 0x5F || b == 0x2E || b == 0x7E)) { // - _ . ~
]]>
</codefragment>
</duplication>
<duplication lines="39" tokens="161">
<file line="49" path="/Volumes/1394/svnwc/jinahya.googlecode.com/trunk/src/main/java/jinahya/net/URLDecodingInputStream.java"/>
<file line="43" path="/Volumes/1394/svnwc/jinahya.googlecode.com/trunk/src/main/java/jinahya/rfc3986/PercentDecodingInputStream.java"/>
<codefragment>
<![CDATA[
        return PercentDecoder.decode(b, in);
    }


    @Override
    public int read(byte[] b) throws IOException {
        return read(b, 0, b.length);
    }


    @Override
    public int read(byte[] b, int off, int len) throws IOException {
        for (int i = 0; i < len; i++) {
            if ((b[off + i] = (byte) read()) == -1) {
                return i == 0 ? -1 : i;
            }
        }
        return len;
    }


    @Override
    public boolean markSupported() {
        return false;
    }


    @Override
    public long skip(long n) throws IOException {
        long l = 0;
        for (; l < n; l++) {
            int b = read();
            if (b == -1) {
                return l;
            }
        }
        return l;
    }
}
]]>
</codefragment>
</duplication>
<duplication lines="43" tokens="131">
<file line="48" path="/Volumes/1394/svnwc/jinahya.googlecode.com/trunk/src/main/java/jinahya/net/URLEncoder.java"/>
<file line="55" path="/Volumes/1394/svnwc/jinahya.googlecode.com/trunk/src/main/java/jinahya/rfc3986/PercentEncoder.java"/>
<codefragment>
<![CDATA[
        return new String(encode(decoded.getBytes(encoding)), "US-ASCII");
    }


    /**
     * 
     * @param decoded
     * @return
     * @throws IOException
     */
    public static byte[] encode(final byte[] decoded) throws IOException {
        final ByteArrayOutputStream output = new ByteArrayOutputStream();
        encode(new ByteArrayInputStream(decoded), output);
        output.flush();
        return output.toByteArray();
    }


    /**
     * 
     * @param input
     * @param output
     * @throws IOException
     */
    public static void encode(final InputStream input,
                              final OutputStream output)
        throws IOException {

        if (input == null) {
            throw new IllegalArgumentException("null input");
        }

        if (output == null) {
            throw new IllegalArgumentException("null output");
        }

        for (int b = -1; (b = input.read()) != -1; ) {
            encode(b, output);
        }
    }


    static void encode(final int b, final OutputStream output)
]]>
</codefragment>
</duplication>
</pmd-cpd>