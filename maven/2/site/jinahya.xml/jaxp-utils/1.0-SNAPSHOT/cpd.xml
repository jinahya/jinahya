<?xml version="1.0" encoding="UTF-8"?>
<pmd-cpd>
<duplication lines="68" tokens="156">
<file line="151" path="D:\svnwc\jinahya.googlecode.com\maven\2\proj\jinahya.xml\jaxp-utils\trunk\src\main\java\jinahya\xml\dompath\NodePath.java"/>
<file line="198" path="D:\svnwc\jinahya.googlecode.com\maven\2\proj\jinahya.xml\jaxp-utils\trunk\src\main\java\jinahya\xml\xpath\NodePath.java"/>
<codefragment>
<![CDATA[
        return evaluateNUMBER(expression, compile).longValue();
    }


    /**
     *
     * @param expression xpath expression
     * @param compile the boolean flag for pre-compilation
     * @return a Node matches given <code>expression</code>
     * @throws XPathExpressionException if xpath expression error occurs.
     */
    public Node evaluateNODE(final String expression, final boolean compile)
        throws XPathExpressionException {

        return (Node) evaluate(expression, XPathConstants.NODE, compile);
    }


    /**
     *
     * @param expression
     * @param compile
     * @return
     * @throws XPathExpressionException
     */
    public Element evaluateElement(final String expression,
                                   final boolean compile)
        throws XPathExpressionException {

        return (Element) evaluateNODE(expression, compile);
    }


    /**
     *
     * @param expression
     * @param compile
     * @return
     * @throws XPathExpressionException
     */
    public NodeList evaluateNODESET(final String expression,
                                    final boolean compile)
        throws XPathExpressionException {

        return (NodeList) evaluate(expression, XPathConstants.NODESET, compile);
    }


    /**
     *
     * @param expression
     * @param returnType
     * @param compile
     * @return
     * @throws XPathExpressionException
     */
    public Object evaluate(final String expression, final QName returnType,
                           final boolean compile)
        throws XPathExpressionException {

        if (compile) {
            synchronized (expressions) {
                XPathExpression compiled = expressions.get(expression);
                if (compiled == null) {
                    compiled = path.compile(expression);
                    expressions.put(expression, compiled);
                }
                return compiled.evaluate(node, returnType);
]]>
</codefragment>
</duplication>
<duplication lines="71" tokens="117">
<file line="78" path="D:\svnwc\jinahya.googlecode.com\maven\2\proj\jinahya.xml\jaxp-utils\trunk\src\main\java\jinahya\xml\dompath\NodePath.java"/>
<file line="96" path="D:\svnwc\jinahya.googlecode.com\maven\2\proj\jinahya.xml\jaxp-utils\trunk\src\main\java\jinahya\xml\xpath\NodePath.java"/>
<codefragment>
<![CDATA[
        return path.evaluate(expression, node);
    }


    /**
     *
     * @param expression
     * @param compile
     * @return
     * @throws XPathExpressionException
     */
    public Boolean evaluateBOOLEAN(final String expression,
                                   final boolean compile)
        throws XPathExpressionException {

        return (Boolean) evaluate(expression, XPathConstants.BOOLEAN, compile);
    }


    /**
     *
     * @param expression
     * @param compile
     * @return
     * @throws XPathExpressionException
     */
    public boolean evaluateBoolean(final String expression,
                                   final boolean compile)
        throws XPathExpressionException {

        return evaluateBOOLEAN(expression, compile).booleanValue();
    }


    /**
     *
     * @param expression
     * @param compile
     * @return
     * @throws XPathExpressionException
     */
    public Double evaluateNUMBER(final String expression, final boolean compile)
        throws XPathExpressionException {

        return (Double) evaluate(expression, XPathConstants.NUMBER, compile);
    }


    /**
     *
     * @param expression
     * @param compile
     * @return
     * @throws XPathExpressionException
     */
    public double evaluateDouble(final String expression,
                                 final boolean compile)
        throws XPathExpressionException {

        return evaluateNUMBER(expression, compile).doubleValue();
    }


    /**
     *
     * @param expression
     * @param compile
     * @return
     * @throws XPathExpressionException
     */
    public float evaluateFloat(final String expression, final boolean compile)
]]>
</codefragment>
</duplication>
</pmd-cpd>