/*
 * Copyright 2011 Jin Kwon.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package com.googlecode.jinahya.io;


import java.util.Random;

import org.apache.commons.lang3.RandomStringUtils;

import org.testng.Assert;


/**
 *
 * @author <a href="mailto:jinahya@gmail.com">Jin Kwon</a>
 */
public abstract class BitIOTest {


    /** random. */
    protected static final Random RANDOM = new Random();


    /** count. */
    protected static final int INVOCATION_COUNT = 64;


    /** string length. */
    protected static final int STRING_LENGTH = 128;


    /** bytes length. */
    protected static final int BYTES_LENGTH = 128;


    protected static final int newStringLength() {

        return RANDOM.nextInt(STRING_LENGTH) + STRING_LENGTH;
    }


    protected static final int newBytesLength() {

        return RANDOM.nextInt(BYTES_LENGTH) + BYTES_LENGTH;
    }


    /**
     * Generates a random ASCII string.
     *
     * @param nullable nullable flag
     * @return generated ASCII string.
     */
    protected static String newASCII(final boolean nullable) {

        if (nullable && RANDOM.nextBoolean()) {
            return null;
        }

        if (RANDOM.nextBoolean()) {
            return "";
        }

        return RandomStringUtils.randomAscii(newStringLength());
    }


    /**
     * Generates a random string.
     *
     * @param nullable nullable flag.
     * @return generated string.
     */
    protected static String newString(final boolean nullable) {

        if (nullable && RANDOM.nextBoolean()) {
            return null;
        }

        if (RANDOM.nextBoolean()) {
            return "";
        }

        return RandomStringUtils.random(newStringLength());
    }


    /**
     * Returns a random count.
     *
     * @return new random count
     */
    protected static int newCount() {
        return RANDOM.nextInt(INVOCATION_COUNT) + INVOCATION_COUNT;
    }


    /**
     * Generates a boolean.
     *
     * @param nullable nullable flag
     * @return generated Boolean or null
     */
    protected static Boolean newBoolean(final boolean nullable) {

        if (nullable && RANDOM.nextBoolean()) {
            return null;
        }

        return RANDOM.nextBoolean();
    }


    /**
     * Generates a byte array.
     *
     * @param nullable nullable flag
     * @return generated byte array or null
     */
    protected static byte[] newBytes(final boolean nullable) {

        if (nullable && RANDOM.nextBoolean()) {
            return null;
        }

        if (RANDOM.nextBoolean()) {
            return new byte[0];
        }

        final byte[] bytes = new byte[newBytesLength()];
        RANDOM.nextBytes(bytes);
        return bytes;
    }


    /**
     * Generates a bit length for unsigned integers.
     *
     * @return bit length
     */
    protected static int newUnsignedIntLength() {

        if (RANDOM.nextBoolean()) {
            return 0x01; // mininum
        }

        if (RANDOM.nextBoolean()) {
            return 0x1F; // maximum
        }

        return checkUnsignedIntLength(RANDOM.nextInt(31) + 1); // 1 - 31
    }


    /**
     * Check the bit length for unsigned integers.
     *
     * @param length bit length to check
     * @return given <code>length</code>
     */
    protected static int checkUnsignedIntLength(final int length) {
        Assert.assertTrue(length >= 1);
        Assert.assertTrue(length < Integer.SIZE);
        return length;
    }


    /**
     * Generates a bit length for signed integers.
     *
     * @return generated bit length
     */
    protected static int newSignedIntLength() {

        if (RANDOM.nextBoolean()) {
            return 0x02; // mininum
        }

        if (RANDOM.nextBoolean()) {
            return 0x20; // maximum
        }

        return checkSignedIntLength(RANDOM.nextInt(31) + 2); // 2 - 32
    }


    /**
     * Check a bit length for signed integers.
     *
     * @param length bit length to check
     * @return given <code>length</code>
     */
    protected static int checkSignedIntLength(final int length) {
        Assert.assertTrue(length > 1);
        Assert.assertTrue(length <= Integer.SIZE);
        return length;
    }


    /**
     * Generates an unsigned integer.
     *
     * @param length bit length
     * @param nullable nullable flag
     * @return generated unsigned integer.
     */
    protected static Integer newUnsignedIntValue(final int length,
                                                 final boolean nullable) {

        checkUnsignedIntLength(length);

        if (nullable && RANDOM.nextBoolean()) {
            return null;
        }

        if (length == 0x1F && RANDOM.nextBoolean()) {
            return Integer.MAX_VALUE;
        }

        final int value = RANDOM.nextInt() >>> (Integer.SIZE - length);

        Assert.assertTrue((value >> length) == 0);

        return value;
    }


    /**
     * Generates a signed integer.
     *
     * @param length bit length
     * @param nullable nullable flag
     * @return generated signed integer.
     */
    protected static Integer newSignedIntValue(final int length,
                                               final boolean nullable) {

        checkSignedIntLength(length);

        if (nullable && RANDOM.nextBoolean()) {
            return null;
        }

        if (length == 0x20 && RANDOM.nextBoolean()) {
            return Integer.MIN_VALUE;
        }

        if (length == 0x20 && RANDOM.nextBoolean()) {
            return Integer.MAX_VALUE;
        }

        final int value = RANDOM.nextInt() >> (Integer.SIZE - length);

        if (length < Integer.SIZE) {
            if (value < 0L) {
                Assert.assertTrue((value >> length) == -1);
            } else {
                Assert.assertTrue((value >> length) == 0);
            }
        }

        return value;
    }


    /**
     * Generates an arbitrary bit length for a unsigned long value.
     *
     * @return generated bit length
     */
    protected static int newUnsignedLongLength() {
        return checkUnsignedLongLength(RANDOM.nextInt(63) + 1); // 1 - 63
    }


    /**
     * Checks a bit length for a unsigned long.
     *
     * @param length bit length to check
     * @return given <code>length</code>
     */
    protected static int checkUnsignedLongLength(final int length) {
        Assert.assertTrue(length >= 1);
        Assert.assertTrue(length < Long.SIZE);
        return length;
    }


    /**
     * Generates an arbitrary bit length for a signed long.
     *
     * @return generated bit length.
     */
    protected static int newSignedLongLength() {
        return checkSignedLongLength(RANDOM.nextInt(63) + 2); // 2 - 64
    }


    /**
     * Checks given bit <code>length</code> is suitable for signed long values.
     *
     * @param length bit length
     * @return given <code>length</code>
     */
    protected static int checkSignedLongLength(final int length) {
        Assert.assertTrue(length > 1);
        Assert.assertTrue(length <= Long.SIZE);
        return length;
    }


    /**
     * Generates an unsigned long value.
     *
     * @param length bit length
     * @param nullable nullable flag
     * @return generated unsigned long value.
     */
    protected static Long newUnsignedLongValue(final int length,
                                               final boolean nullable) {

        checkUnsignedLongLength(length);

        if (nullable && RANDOM.nextBoolean()) {
            return null;
        }

        if (length == 0x3F && RANDOM.nextBoolean()) {
            return Long.MAX_VALUE;
        }

        final long value = RANDOM.nextLong() >>> (Long.SIZE - length);

        Assert.assertTrue((value >> length) == 0L);

        return value;
    }


    /**
     * Generates a signed long value.
     *
     * @param length bit length
     * @param nullable nullable flag
     * @return generated signed long value.
     */
    protected static Long newSignedLongValue(final int length,
                                             final boolean nullable) {

        checkSignedLongLength(length);

        if (nullable && RANDOM.nextBoolean()) {
            return null;
        }

        if (length == 0x40 && RANDOM.nextBoolean()) {
            return Long.MIN_VALUE;
        }

        if (length == 0x40 && RANDOM.nextBoolean()) {
            return Long.MAX_VALUE;
        }

        final long value = RANDOM.nextLong() >> (Long.SIZE - length);

        if (length < Long.SIZE) {
            if (value < 0L) {
                Assert.assertTrue((value >> length) == -1L);
            } else {
                Assert.assertTrue((value >> length) == 0L);
            }
        }

        return value;
    }


}

