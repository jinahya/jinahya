/*
</p>
<a name="notice"><strong><center>
NOTICE
</center></strong><br>
<br>

(c) 2005-2007 Sun Microsystems, Inc. All Rights Reserved.
<p>
Neither this file nor any files generated from it describe a complete
specification, and they may only be used as described below. For
example, no permission is given for you to incorporate this file, in
whole or in part, in an implementation of a Java specification.
<p>
Sun Microsystems Inc. owns the copyright in this file and it is provided
to you for informative, as opposed to normative, use. The file and any
files generated from it may be used to generate other informative
documentation, such as a unified set of documents of API signatures for
a platform that includes technologies expressed as Java APIs. The file
may also be used to produce "compilation stubs," which allow
applications to be compiled and validated for such platforms.
<p>
Any work generated from this file, such as unified javadocs or compiled
stub files, must be accompanied by this notice in its entirety.
<p>
This work corresponds to the API signatures of JSR 217: Personal Basis
Profile 1.1. In the event of a discrepency between this work and the
JSR 217 specification, which is available at
http://www.jcp.org/en/jsr/detail?id=217, the latter takes precedence.
*/


  


package java.awt.event;

import java.awt.AWTEvent;
// import java.awt.Event;
import java.awt.Component;
import java.awt.Rectangle;

/** 
 * A low-level event which indicates that a component moved, changed
 * size, or changed visibility (also, the root class for the other 
 * component-level events).
 * <P>
 * Component events are provided for notification purposes ONLY;
 * The AWT will automatically handle component moves and resizes
 * internally so that GUI layout works properly regardless of
 * whether a program is receiving these events or not.
 * <P>
 * In addition to serving as the base class for other component-related
 * events (InputEvent, FocusEvent, WindowEvent, ContainerEvent),
 * this class defines the events that indicate changes in
 * a component's size, position, or visibility. 
 * <P>
 * This low-level event is generated by a component object (such as a 
 * List) when the component is moved, resized, rendered invisible, or made
 * visible again. The event is passed to every <code>ComponentListener</code>
 * or <code>ComponentAdapter</code> object which registered to receive such
 * events using the component's <code>addComponentListener</code> method.
 * (<code>ComponentAdapter</code> objects implement the 
 * <code>ComponentListener</code> interface.) Each such listener object 
 * gets this <code>ComponentEvent</code> when the event occurs.
 *
 * @see ComponentAdapter
 * @see ComponentListener
 * @see <a href="http://java.sun.com/docs/books/tutorial/post1.0/ui/componentlistener.html">Tutorial: Writing a Component Listener</a>
 * @see <a href="http://www.awl.com/cp/javaseries/jcl1_2.html">Reference: The Java Class Libraries (update file)</a>
 *
 * @author Carl Quinn
 * @version 1.25 01/23/03
 * @since 1.1
 */
public class ComponentEvent extends AWTEvent
{
    /** 
     * The first number in the range of ids used for component events.
     */
    public static final int COMPONENT_FIRST = 100;

    /** 
     * The last number in the range of ids used for component events.
     */
    public static final int COMPONENT_LAST = 103;

    /** 
     * This event indicates that the component's position changed.
     */
    public static final int COMPONENT_MOVED = COMPONENT_FIRST;

    /** 
     * This event indicates that the component's size changed.
     */
    public static final int COMPONENT_RESIZED = 1 + COMPONENT_FIRST;

    /** 
     * This event indicates that the component was made visible.
     */
    public static final int COMPONENT_SHOWN = 2 + COMPONENT_FIRST;

    /** 
     * This event indicates that the component was rendered invisible.
     */
    public static final int COMPONENT_HIDDEN = 3 + COMPONENT_FIRST;

    /*
     * JDK 1.1 serialVersionUID 
     */
    private static final long serialVersionUID = 8101406823902992965L;

    /** 
     * Constructs a <code>ComponentEvent</code> object.
     * <p>Note that passing in an invalid <code>id</code> results in
     * unspecified behavior.
     *
     * @param source the <code>Component</code> that originated the event
     * @param id     an integer indicating the type of event
     */
    public ComponentEvent(Component source, int id) { super(null, 0); }

    /** 
     * Returns the originator of the event.
     *
     * @return the <code>Component</code> object that originated 
     * the event, or <code>null</code> if the object is not a 
     * <code>Component</code>.  
     */
    public Component getComponent() {return null; }

    /** 
     * Returns a parameter string identifying this event.
     * This method is useful for event-logging and for debugging.
     *
     * @return a string identifying the event and its attributes
     */
    public String paramString() { return null; }
}
