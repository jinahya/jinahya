#summary Simple finite state machine support.
#labels Featured,Phase-Implementation

= Introduction =

Add your content here.

= Apidocs =
  * [http://jinahya.googlecode.com/svn/site/com.googlecode.jinahya/finite-state-machine/1.0-alpha-10/apidocs/index.html 1.0-alpha-10]

= Details =

Add your content here.  Format your content with:
  * Text in *bold* or _italic_
  * Headings, paragraphs, and lists
  * Automatic links to other wiki pages
= Components =
== State ==
A State represents the machine's current state.
== Machine ==
A Machine represents a state machine which is holding a state value.
== Transition ==
A Transition consists of two States. One for the previous(old) State and one for the current(new) State.
{{{
final Transition transition = ...;
final State previous = transition.getSource();
final State current = transition.getTarget();
}}}
==== Transition(State, State) ====
== Task ==
A Task represents those actions to be performed when a Machine has been transited.
==== {{{Task(String)}}} ====
==== {{{void prepare(TransitionContext)}}} ====
==== {{{void perform(TransitionContext)}}} ====
=== !TaskContext ===
TaskContexts are responsible to load Tasks.

=== Machine ===
Machines are responsible for holding current State and fire Transitions to MachineContext.
==== {{{Machine(MachineContext)}}} ====
==== {{{void setState(State)}}} ====

=== !MachineContext ===
MachineContexts are responsible to perform Tasks retrieved from TaskContext.
==== {{{MachineContext(TextContext)}}} ====
==== void transited(Transition) ====