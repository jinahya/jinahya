#summary Twiter-xAuth-Client.
#labels Twitter,xAuth

= Introduction =

jinahya:twitter-xauth-client:jar is a simple xAuth client for Twitter.


= Details =

== Classes ==
=== jinahya.twitter.xauth.client.Encode ===
This is an utility class for various encoding needed for talking to twitter.
{{{
public String base16(byte[] input);
public String base64(byte[] input);
public String percent(byte[] input);
public String url(byte[] input);
}}}
=== jinahya.twitter.xauth.client.Client ===
=== jinahya.twitter.xauth.client.authenticator.Authenticator ===
This interface is responsible for generating HMAC-SHA1 authentication code.
{{{
/**
 * Generates HMAC-SHA1 code.
 *
 * @param key key
 * @param input input
 * @returns HMAC-SHA1 output
 */
public byte[] authenticate(byte[] key, byte[] input) throws Exception;
}}}
==== jinahya.twitter.xauth.client.authenticator.JCAAuthenticator ====
This class uses the standard JCA class for HMAC-SHA1
==== jinahya.twitter.xauth.client.authenticator.BouncyCastleAuthenticator (Java ME) ====
This class uses BouncyCastle classes for HMAC-SHA1.
=== jinahya.twitter.xauth.client.requester.Requester ===
==== jinahya.twitter.xauth.client.requeter.HttpConnectionRequester (Java ME) ====
This class uses javax.microedition.io.HttpConnection.
==== jinahya.twitter.xauth.client.requeter.HttpURLConnectionRequester ====
This class uses java.net.HttpURLConnection.
==== jinahya.twitter.xauth.client.requeter.SocketConnectionRequester ====
This requester uses javax.microedition.io.SocketConnection.
==== jinahya.twitter.xauth.client.requeter.SocketRequester (Java ME) ====
This requester uses java.net.Socket.
== How to use... ==
=== Prepare your Authenticator and Requester ==
You can use your own implement, or you can use those prepared classes.
{{{
class MyAuthenticator implements Authenticator {

    @Override
    public byte[] authenticate(final byte[] key, final byte[] input) throws Exception {
        // HmacSHA1
    }
}
}}}
{{{
class MyRequester implements Requester {

    @Override
    public InputStream request(final String method, final String url,
                               final String parameters, final String authorization)
        throws Exception {

        // Talk to Twitter
    }
}
}}}
=== Extend the client ===
{{{
class MyClient extends Client {

    public MyClient(final String consumerKey, final String consumerSecret) {
        super(consumerKey, consumerSecret);

        authenticator = new MyAuthenticator();
        requester = new MyRequester();
    }

    @Override
    public byte[] authenticate(final byte[] key, final byte[] input) throws Exception {
        return authenticator.authenticate(key, input);
    }

    @Override
    public void request(final String method, final String url, final String parameters,
                        final String authorization)
        throws Exception {

        requester.request(method, url, parameters, authorization);
    }

    private final Authenticator authenticator;
    private final Requester requester;
}
}}}

Add your content here.  Format your content with:
  * Text in *bold* or _italic_
  * Headings, paragraphs, and lists
  * Automatic links to other wiki pages