#summary Simple (and somewhat restricted) XML parser/printer.
#labels XML

= Introduction =
Simple (and somewhat restricted) XML parser/printer.

= Details =
This is a simple XML parser/printer. This artifact is not fully applicable to any XML libraries and there are some restrictions. This library is just a thin wrapper for various in-memory XML parser models. You can use DOM, kXML2, JDOM, DOM4J, or XOM as underlying XML model.

== Apidocs ==
  * [http://jinahya.googlecode.com/svn/site/com.googlecode.jinahya/element-locator/1.0-alpha-5/apidocs/index.html 1.0-alpha-5]
  * [http://jinahya.googlecode.com/svn/site/com.googlecode.jinahya/element-locator/1.0-alpha-4/apidocs/index.html 1.0-alpha-4]

== Simple XML ==
  * There are only attributes, elements, and texts.
  * No other types are supported.
  * No ignorable white spaces.
  * No mixed content. Elements are always prior to texts.
  * And so on.




== Reading XML ==
Every concrete class has a static method for parsing a platform-specific Document.
{{{
Document document = ...; // parse as model specific way.
XXXElementLocator.parse(Document);
}}}
== Writing XML ==
Create the root element.
{{{
final ELElement root = new ELElement(namespaceURI, localName);
}}}
And invoke the constructors with the root element.
{{{
final ElementLocator locator = new XXXElementLocator(root);
}}}
When you're done, you can get the document back from the ELElement.
{{{
Document document = ...; // create as model specific way
XXXElementLocator.print(locator.getRootElement(), document);
}}}
And you can print the document as model specific way.
== Example ==
Lets do some.
=== family.xml ===
{{{
<?xml version="1.0"?>
<grandparent age="100" xmlns="http://www.example.org/family">
  <parent age="50">
    <child age="30" xmlns:o="http://www.example.com/family/other">
      <grandchild age="5" o:gender="male">John</grandchild>
      <o:spouse o:name="Marry"/>
    </child>
    <child age="26"/>
  </parent>
</grandparent>
}}}
=== Family.java ===
{{{
public class Family {


    public static void main(String[] args) throws Exception {

        // ------------------------------------------ PARSE DOCUMENT FROM SOURCE
        DOMImplementationRegistry registry =
            DOMImplementationRegistry.newInstance();
        DOMImplementationLS implementation =
            (DOMImplementationLS) registry.getDOMImplementation("XML 3.0");
        final LSParser parser = implementation.createLSParser(
            DOMImplementationLS.MODE_SYNCHRONOUS,
            XMLConstants.W3C_XML_SCHEMA_NS_URI);
        final LSInput input = implementation.createLSInput();
        input.setByteStream(Family.class.getResourceAsStream("family.xml"));
        input.setEncoding("UTF-8");
        final Document document = parser.parse(input);

        // ----------------------------------------- PARSE LOCATOR FROM DOCUMENT
        final ElementLocator locator = DOMElementLocator.parse(document);

        final String family = "http://www.example.org/family";
        final String other = "http://www.example.com/family/other";

        final String namespaceURI = locator.getNamespaceURI(); // family
        final String localName = locator.getLocalName(); // "grandparent"
        final String grandparentAge = locator.getAttribute("age"); // "100"
        System.out.println("/:grandparent/@age -> " + grandparentAge);

        locator.locateChild(family, "parent", 0);
        final String parentAge = locator.getAttribute("age"); // "50";
        System.out.println("/:grandparent/:parent[1]/@age -> " + parentAge);

        final int childCount = locator.getChildCount(family, "child");
        for (int i = 0; i < childCount; i++) {

            locator.locateChild(family, "child", i);

            final String childAge = locator.getAttribute("age");
            System.out.println(
                "/:grandparent/:parent[1]/:child[" + (i + 1) + "]/@age -> "
                + childAge);

            final int grandChildCount =
                locator.getChildCount(family, "grandchild");
            for (int j = 0; j < grandChildCount; j++) {

                locator.locateChild(family, "grandchild", j);

                final String gender = locator.getAttribute(other, "gender");
                System.out.println(
                    "/:grandparent/:parent[1]/:child[" + (i + 1)
                    + "]/:grandchild/@o:gender -> " + gender);
                locator.setAttribute(other, "gender", null); // remove attribute

                final String name = locator.getText();
                System.out.println("/:grandparent/:parent[1]/:child[" + (i + 1)
                                   + "]/:grandchild/text() -> " + name);
                locator.setText(null); // remove text

                locator.locateParent();
            }

            final int spouseCount = locator.getChildCount(other, "spouse");
            for (int j = spouseCount - 1; j >= 0; j--) {
                locator.locateChild(other, "spouse", j);

                final String spouseName = locator.getAttribute(other, "name");
                System.out.println(
                    "/:grandparent/:parent[1]/:child[" + (i + 1)
                    + "]/o:spouse[" + (j + 1) + "]/@o:name -> "
                    + spouseName);
                locator.setAttribute(other, "spouse", null); // remove attribute

                if (j > 0) {
                    locator.removeCurrent();
                } else {
                    locator.locateParent();
                }
            }

            locator.locateParent();
        }

        // ------------------------------------------- PRINT LOCATOR TO DOCUMENT
        DOMElementLocator.print(locator.getRootElement(), document);

        // -------------------------------------------- PRINT DOCUMENT TO TARGET
        final LSSerializer serializer = implementation.createLSSerializer();
        final DOMConfiguration domConfig = serializer.getDomConfig();
        domConfig.setParameter("format-pretty-print", Boolean.TRUE);
        final LSOutput output = implementation.createLSOutput();
        output.setByteStream(System.out);
        output.setEncoding("UTF-8");
        serializer.write(document, output);
        System.out.println();
    }
}
}}}
{{{
/:grandparent/@age -> 100
/:grandparent/:parent[1]/@age -> 50
/:grandparent/:parent[1]/:child[1]/@age -> 30
/:grandparent/:parent[1]/:child[1]/:grandchild/@o:gender -> male
/:grandparent/:parent[1]/:child[1]/:grandchild/text() -> John
/:grandparent/:parent[1]/:child[1]/o:spouse[1]/@o:name -> Marry
/:grandparent/:parent[1]/:child[2]/@age -> 26
}}}
{{{
<?xml version="1.0" encoding="UTF-8"?>
<ns2:grandparent xmlns:ns2="http://www.example.org/family" age="100">
    <ns2:parent age="50">
        <ns2:child age="30">
            <ns2:grandchild age="5"/>
            <ns1:spouse xmlns:ns1="http://www.example.com/family/other" ns1:name="Marry"/>
        </ns2:child>
        <ns2:child age="26"/>
    </ns2:parent>
</ns2:grandparent>
}}}
== Links ==
  * [http://www.w3.org/2003/01/dom2-javadoc/ W3C Document Object Model Level 2 version 1.0]
  * [http://www.jdom.org/docs/apidocs/ JDOM v1.1.1 API Specification]
  * [http://kxml.sourceforge.net/kxml2/javadoc/ kxml API]
  * [http://dom4j.sourceforge.net/apidocs/ dom4j 2.0.0-ALPHA-2 API]
  * [http://www.xom.nu/apidocs/ XOM 1.2.6]